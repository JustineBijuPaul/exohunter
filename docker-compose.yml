version: '3.8'

services:
  # FastAPI backend service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: exohunter-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://exohunter:exohunter_password@db:5432/exohunter
      - DATABASE_AVAILABLE=true
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - db
    networks:
      - exohunter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (React/Node.js)
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile
    container_name: exohunter-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - exohunter-network
    restart: unless-stopped

  # PostgreSQL database service (optional)
  db:
    image: postgres:15-alpine
    container_name: exohunter-db
    environment:
      - POSTGRES_DB=exohunter
      - POSTGRES_USER=exohunter
      - POSTGRES_PASSWORD=exohunter_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - exohunter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exohunter -d exohunter"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache service (optional)
  redis:
    image: redis:7-alpine
    container_name: exohunter-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - exohunter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: exohunter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - exohunter-network
    restart: unless-stopped
    profiles:
      - production

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network for service communication
networks:
  exohunter-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
