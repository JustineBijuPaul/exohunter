name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        make install

    - name: Run tests
      run: |
        make test

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run flake8
      run: |
        flake8 --max-line-length=100 --ignore=E501,W503,E203 --exclude=.git,__pycache__,docs/,build/,dist/ .

    - name: Check black formatting
      run: |
        black --check --line-length=100 --exclude="/(\.git|\.venv|\.tox|build|dist)/" .

    - name: Check import sorting
      run: |
        isort --check-only --profile black --line-length=100 .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: |
        bandit -r . -x tests/,build/,dist/ -f json -o bandit-report.json || true

    - name: Check dependencies for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t exohunter:test .
        else
          echo "No Dockerfile found, skipping Docker tests"
        fi

    - name: Test Docker container
      run: |
        if [ -f Dockerfile ]; then
          docker run --rm exohunter:test python -c "import sys; print(f'Python {sys.version}')"
        else
          echo "No Dockerfile found, skipping Docker tests"
        fi

  test-notebooks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
        pip install nbconvert

    - name: Test Jupyter notebooks
      run: |
        if ls notebooks/*.ipynb 1> /dev/null 2>&1; then
          for notebook in notebooks/*.ipynb; do
            echo "Testing $notebook"
            jupyter nbconvert --to notebook --execute "$notebook" --output /tmp/test_output.ipynb
          done
        else
          echo "No notebooks found, skipping notebook tests"
        fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install

    - name: Start API server in background
      run: |
        if [ -f web/api/main.py ]; then
          cd web/api && python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        else
          echo "API server not found, skipping integration tests"
        fi

    - name: Run integration tests
      run: |
        if [ -f web/api/main.py ]; then
          # Test API health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Test API documentation
          curl -f http://localhost:8000/docs || exit 1
          
          echo "Integration tests passed!"
        else
          echo "API server not found, skipping integration tests"
        fi

  build-and-test-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        if [ -f setup.py ] || [ -f pyproject.toml ]; then
          python -m build
        else
          echo "No setup.py or pyproject.toml found, skipping package build"
        fi

    - name: Check package
      run: |
        if [ -d dist/ ]; then
          twine check dist/*
        else
          echo "No dist/ directory found, skipping package check"
        fi

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          build/
